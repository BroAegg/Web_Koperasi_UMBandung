// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================================
// ENUMS - Centralized Type Definitions
// ==========================================

enum Role {
  DEVELOPER
  SUPER_ADMIN
  ADMIN
  KASIR
  STAFF
  SUPPLIER
}

enum TransactionType {
  CASH_IN
  CASH_OUT
  TRANSFER
  ADJUSTMENT
}

enum TransactionCategory {
  SALES
  PURCHASE
  OPERATIONAL
  MEMBER_DEPOSIT
  MEMBER_WITHDRAWAL
  OTHER
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  E_WALLET
  OTHER
}

enum StockMovementType {
  IN
  OUT
  ADJUSTMENT
  RETURN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

// ==========================================
// USER MANAGEMENT
// ==========================================

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String?  @unique
  password      String
  full_name     String
  phone         String?
  role          Role
  is_active     Boolean  @default(true)
  
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  deleted_at    DateTime?
  
  // Relations
  activity_logs ActivityLog[]
  
  @@map("users")
}

// ==========================================
// SUPPLIERS
// ==========================================

model Supplier {
  id              String   @id @default(cuid())
  business_name   String
  contact_person  String
  phone           String
  email           String?
  address         String?
  is_active       Boolean  @default(true)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?
  
  // Relations
  products        Product[]
  transactions    Transaction[]
  
  @@map("suppliers")
}

// ==========================================
// PRODUCTS & INVENTORY
// ==========================================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  
  // Relations
  products    Product[]
  
  @@map("categories")
}

model Product {
  id              String   @id @default(cuid())
  sku             String   @unique
  name            String
  description     String?
  category_id     String
  supplier_id     String
  
  purchase_price  Decimal  @db.Decimal(12, 2)
  selling_price   Decimal  @db.Decimal(12, 2)
  stock           Int      @default(0)
  min_stock       Int      @default(5)
  
  is_active       Boolean  @default(true)
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  deleted_at      DateTime?
  
  // Relations
  category        Category         @relation(fields: [category_id], references: [id])
  supplier        Supplier         @relation(fields: [supplier_id], references: [id])
  stock_movements StockMovement[]
  order_items     OrderItem[]
  
  @@map("products")
}

model StockMovement {
  id              String            @id @default(cuid())
  product_id      String
  type            StockMovementType
  quantity        Int
  notes           String?
  
  created_at      DateTime          @default(now())
  created_by      String?
  
  // Relations
  product         Product           @relation(fields: [product_id], references: [id])
  
  @@map("stock_movements")
}

// ==========================================
// FINANCIAL TRANSACTIONS
// ==========================================

model Transaction {
  id              String              @id @default(cuid())
  type            TransactionType
  category        TransactionCategory
  amount          Decimal             @db.Decimal(12, 2)
  payment_method  PaymentMethod
  
  description     String
  notes           String?
  
  supplier_id     String?
  reference_id    String?             // Link to Order or other entities
  
  created_at      DateTime            @default(now())
  created_by      String?
  
  // Relations
  supplier        Supplier?           @relation(fields: [supplier_id], references: [id])
  
  @@map("transactions")
}

// ==========================================
// POINT OF SALE (POS)
// ==========================================

model Order {
  id              String      @id @default(cuid())
  order_number    String      @unique
  customer_name   String?
  
  subtotal        Decimal     @db.Decimal(12, 2)
  discount        Decimal     @default(0) @db.Decimal(12, 2)
  tax             Decimal     @default(0) @db.Decimal(12, 2)
  total           Decimal     @db.Decimal(12, 2)
  
  payment_method  PaymentMethod
  payment_amount  Decimal     @db.Decimal(12, 2)
  change_amount   Decimal     @default(0) @db.Decimal(12, 2)
  
  status          OrderStatus @default(PENDING)
  
  created_at      DateTime    @default(now())
  created_by      String?
  
  // Relations
  items           OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id              String   @id @default(cuid())
  order_id        String
  product_id      String
  
  quantity        Int
  price           Decimal  @db.Decimal(12, 2)
  subtotal        Decimal  @db.Decimal(12, 2)
  
  // Relations
  order           Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  product         Product  @relation(fields: [product_id], references: [id])
  
  @@map("order_items")
}

// ==========================================
// ACTIVITY LOGGING
// ==========================================

model ActivityLog {
  id              String   @id @default(cuid())
  user_id         String
  role            Role
  
  action          String   // CREATE, UPDATE, DELETE, LOGIN, LOGOUT
  module          String   // FINANCIAL, INVENTORY, POS, SUPPLIERS, etc.
  description     String
  
  ip_address      String?
  user_agent      String?
  
  created_at      DateTime @default(now())
  
  // Relations
  user            User     @relation(fields: [user_id], references: [id])
  
  @@index([user_id])
  @@index([created_at])
  @@map("activity_logs")
}
